@using System.Collections
@using FlexTemplate.Entities
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@model FlexTemplate.ViewModels.HomeController.ThisPlacesFiltersViewModel
@{
    object buffer;
    if (!ViewBag.Query.TryGetValue("categories", out buffer))
    {
        buffer = null;
    }
    IEnumerable<string> categories = new List<string>();
    if (buffer is IEnumerable)
    {
        categories = buffer as IEnumerable<string>;
    }
    IEnumerable<string> cities = new List<string>();
    if (!ViewBag.Query.TryGetValue("cities", out buffer))
    {
        buffer = null;
    }
    if (buffer is IEnumerable)
    {
        cities = buffer as IEnumerable<string>;
    }
    var listType = "list";
    if (!ViewBag.Query.TryGetValue("listType", out buffer))
    {
        buffer = null;
    }
    if (buffer is IEnumerable)
    {
        listType = ((IEnumerable<string>)buffer).FirstOrDefault();
    }
    string orderBy = null;
    if (!ViewBag.Query.TryGetValue("orderBy", out buffer))
    {
        buffer = null;
    }
    if (buffer is IEnumerable)
    {
        orderBy = ((IEnumerable<string>)buffer).FirstOrDefault();
    }
    var isDescending = false;
    if (!ViewBag.Query.TryGetValue("isDescending", out buffer))
    {
        buffer = null;
    }
    if (buffer is IEnumerable)
    {
        var isDescendingStr = ((IEnumerable<string>)buffer).FirstOrDefault();
        bool.TryParse(isDescendingStr, out isDescending);
    }
    string input = null;
    if (!ViewBag.Query.TryGetValue("input", out buffer))
    {
        buffer = null;
    }
    if (buffer is IEnumerable)
    {
        input = ((IEnumerable<string>)buffer).FirstOrDefault();
        input = string.IsNullOrEmpty(input) ? null : input;
    }
    var contains = false;
    var routeCities = new List<string>();
    var routeCategories = new List<string>();
}
<div class="col-sm-4 col-md-3">

    <div class="section-title-02">
        <h4><span>Фільтри</span></h4>
    </div>

    <!--<div class="sidebar-module">
        <h5>Price Range</h5>
        <div class="range-slider-wrapper">
            <input id="price_range" />
        </div>
    </div>

    <div class="sidebar-module">
        <h5>Rating Range</h5>
        <div class="range-slider-wrapper">
            <input id="star_rating_range" />
        </div>
    </div>-->

    <div class="sidebar-module">
        <h5>Категорії</h5>
        @foreach (Category category in Model.Categories)
        {
            <div class="checkbox-block font-icon-checkbox">
                @{
                    contains = false;
                    routeCategories = new List<string>();
                    routeCities = new List<string>();
                    routeCities.AddRange(cities);
                    if (categories.Any())
                    {
                        contains = categories.Contains(category.Id.ToString());
                        routeCategories.AddRange(categories);
                        if (contains)
                        {
                            routeCategories.Remove(category.Id.ToString());
                        }
                        else
                        {
                            routeCategories.Add(category.Id.ToString());
                        }
                    }
                    else
                    {
                        routeCategories.Add(category.Id.ToString());
                    }
                }
                <input id="filter_categories-@category.Id" onchange="window.location.href = '@Url.Action("Places", "Home", new { listType = listType, categories = routeCategories, cities = routeCities, input = input, isDescending = isDescending, orderBy = orderBy })'" type="checkbox" class="checkbox" checked="@contains" />
                <label for="filter_categories-@category.Id">@category.Name</label>
            </div>
        }
    </div>

    <div class="sidebar-module">
        <h5>Міста</h5>
        @foreach (City city in Model.Cities)
        {
            <div class="checkbox-block font-icon-checkbox">
                @{
                    contains = false;
                    routeCategories = new List<string>();
                    routeCities = new List<string>();
                    routeCategories.AddRange(categories);
                    if (cities.Any())
                    {
                        contains = cities.Contains(city.Id.ToString());
                        routeCities.AddRange(cities);
                        if (contains)
                        {
                            routeCities.Remove(city.Id.ToString());
                        }
                        else
                        {
                            routeCities.Add(city.Id.ToString());
                        }
                    }
                    else
                    {
                        routeCities.Add(city.Id.ToString());
                    }
                }
                <input id="filter_cities-@city.Id" onchange="window.location.href = '@Url.Action("Places", "Home", new { categories = routeCategories, listType = listType, cities = routeCities, input = input, isDescending = isDescending, orderBy = orderBy })'" type="checkbox" class="checkbox" checked="@contains" />
                <label for="filter_cities-@city.Id">@city.Name</label>
            </div>
        }
    </div>

    <!--<div class="sidebar-module">
        <h5>Sidebar Text</h5>
        <p>Attachment apartments in delightful by motionless it no. And now she burst sir learn total. Hearing hearted shewing own ask. Solicitude uncommonly use her motionless not collecting age. The properly servants required mistaken outlived bed and.</p>
    </div>-->
</div>